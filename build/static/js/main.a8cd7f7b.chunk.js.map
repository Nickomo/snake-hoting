{"version":3,"sources":["raw/music.mp3","components/App/App.jsx","index.js"],"names":["DIRECTS","audioPlayer","Audio","audio","fieldSize","snakeSize","App","state","ctx","interval","snake","currentDirection","isFoodExists","currFoodPosX","currFoodPosY","score","isGameOver","sync","muted","canvas","React","createRef","createFood","rnd1","Math","floor","random","rnd2","setState","createSnake","x","y","handlerKeydown","e","code","up","down","left","right","startGame","current","getContext","document","addEventListener","setInterval","moveSnake","stopGame","clearInterval","removeEventListener","length","some","el","idx","newSnake","push","shift","startMusic","play","loop","stopMusic","pause","this","clearRect","fillStyle","map","fillRect","music","onClick","className","id","height","width","ref","src","autoPlay","retry","Component","GameOver","props","style","position","backgroundColor","display","justifyContent","alignItems","opacity","textAlign","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a8cd7f7b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/music.1307af46.mp3\";","import React from 'react';\r\nimport './App.css';\r\nimport audio from '../../raw/music.mp3'\r\n\r\nconst DIRECTS = {\r\n    up: 'up',\r\n    down: 'down',\r\n    left: 'left',\r\n    right: 'right',\r\n};\r\n\r\nconst audioPlayer = new Audio(audio);\r\nconst fieldSize = 450;\r\nconst snakeSize = 10;\r\n\r\n// const FIELD_WIDTH = 500;\r\n// const FIELD_HEIGHT = 500;\r\n// const\r\n\r\n// let interval = null;\r\n// let ctx = null;\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        ctx: null,\r\n        interval: null,\r\n        snake: null,\r\n        currentDirection: DIRECTS.right,\r\n        isFoodExists: false,\r\n        currFoodPosX: null,\r\n        currFoodPosY: null,\r\n        score: 0,\r\n        isGameOver: false,\r\n        sync: true,\r\n        muted: true\r\n    };\r\n    canvas = React.createRef();\r\n\r\n    componentDidMount() {\r\n        this.startGame();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.stopGame();\r\n    }\r\n\r\n    createFood = () => {\r\n        let rnd1 = Math.floor(Math.random() * fieldSize);\r\n        let rnd2 = Math.floor(Math.random() * fieldSize);\r\n        rnd1 = rnd1 - (rnd1 % 10);\r\n        rnd2 = rnd2 - (rnd2 % 10);\r\n\r\n        this.setState({ currFoodPosX: rnd1 });\r\n        this.setState({ currFoodPosY: rnd2 });\r\n        this.setState({ isFoodExists: true });\r\n    };\r\n    createSnake = () => {\r\n        return [\r\n            { x: 10, y: 250 },\r\n            { x: 20, y: 250 },\r\n            { x: 30, y: 250 },\r\n            { x: 40, y: 250 },\r\n            { x: 50, y: 250 },\r\n        ];\r\n    };\r\n\r\n    handlerKeydown = (e) => {\r\n        const { currentDirection, sync } = this.state;\r\n\r\n        switch (e.code) {\r\n            case 'KeyW':\r\n            case 'ArrowUp':\r\n                this.up(currentDirection, sync);\r\n                break;\r\n            case 'KeyS':\r\n            case 'ArrowDown':\r\n                this.down(currentDirection, sync);\r\n                break;\r\n            case 'KeyA':\r\n            case 'ArrowLeft':\r\n                this.left(currentDirection, sync);\r\n                break;\r\n            case 'KeyD':\r\n            case 'ArrowRight':\r\n                this.right(currentDirection, sync);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.setState({ sync: false });\r\n    };\r\n\r\n    up = (currentDirection, sync) => {\r\n        if (currentDirection !== DIRECTS.up && currentDirection !== DIRECTS.down && sync) {\r\n            this.setState({ currentDirection: DIRECTS.up });\r\n        }\r\n    };\r\n    down = (currentDirection, sync) => {\r\n        if (currentDirection !== DIRECTS.down && currentDirection !== DIRECTS.up && sync) {\r\n            this.setState({ currentDirection: DIRECTS.down });\r\n        }\r\n    };\r\n    left = (currentDirection, sync) => {\r\n        if (currentDirection !== DIRECTS.left && currentDirection !== DIRECTS.right && sync) {\r\n            this.setState({ currentDirection: DIRECTS.left });\r\n        }\r\n    };\r\n    right = (currentDirection, sync) => {\r\n        if (currentDirection !== DIRECTS.right && currentDirection !== DIRECTS.left && sync) {\r\n            this.setState({ currentDirection: DIRECTS.right });\r\n        }\r\n    };\r\n\r\n    startGame = () => {\r\n        const ctx = this.canvas.current.getContext('2d');\r\n        document.addEventListener('keydown', this.handlerKeydown);\r\n        const interval = setInterval(this.moveSnake, 70);\r\n        this.setState({ interval, ctx, isGameOver: false, snake: this.createSnake(), score: 0 });\r\n    };\r\n\r\n    stopGame = () => {\r\n        clearInterval(this.state.interval);\r\n        document.removeEventListener('keydown', this.handlerKeydown);\r\n        this.setState({ isGameOver: true, currentDirection: DIRECTS.right });\r\n    };\r\n\r\n    moveSnake = () => {\r\n        const { currFoodPosX, currFoodPosY, snake, sync } = this.state;\r\n        const { x, y } = snake[snake.length - 1];\r\n\r\n        if (!sync) this.setState({ sync: true });\r\n\r\n        if (snake.some((el, idx) => (idx < snake.length - 1 ? el.x === x && el.y === y : false))) {\r\n            this.stopGame();\r\n            return;\r\n        }\r\n\r\n        this.setState(({ snake, currentDirection, currFoodPosX, currFoodPosY }) => {\r\n            let { x, y } = snake[snake.length - 1];\r\n\r\n            if (currentDirection === DIRECTS.up) {\r\n                y -= snakeSize;\r\n            } else if (currentDirection === DIRECTS.down) {\r\n                y += snakeSize;\r\n            } else if (currentDirection === DIRECTS.left) {\r\n                x -= snakeSize;\r\n            } else if (currentDirection === DIRECTS.right) {\r\n                x += snakeSize;\r\n            }\r\n\r\n            if (y >= fieldSize) y = 0;\r\n            else if (y < 0) y = fieldSize - snakeSize;\r\n\r\n            if (x >= fieldSize) x = 0;\r\n            else if (x < 0) x = fieldSize - snakeSize;\r\n\r\n            const newSnake = [...snake];\r\n            newSnake.push({ x, y });\r\n\r\n            if (!(currFoodPosX === x && currFoodPosY === y)) {\r\n                newSnake.shift();\r\n            }\r\n\r\n            return {\r\n                snake: newSnake,\r\n            };\r\n        });\r\n\r\n        if (currFoodPosX === x && currFoodPosY === y) {\r\n            this.setState(({ score }) => ({ isFoodExists: false, score: score + 1 }));\r\n        }\r\n    };\r\n    startMusic = () => {\r\n        audioPlayer.play();\r\n        audioPlayer.loop = true;\r\n        this.setState({muted: false});\r\n    };\r\n    stopMusic = () => {\r\n        audioPlayer.pause();\r\n        this.setState({muted: true});\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            ctx,\r\n            snake,\r\n            isFoodExists,\r\n            currFoodPosX,\r\n            currFoodPosY,\r\n            score,\r\n            isGameOver,\r\n            muted\r\n        } = this.state;\r\n\r\n        if (ctx) {\r\n            ctx.clearRect(0, 0, fieldSize, fieldSize);\r\n            ctx.fillStyle = 'rgb(200, 0, 0)';\r\n            snake.map((el) => {\r\n                ctx.fillRect(el.x, el.y, snakeSize, snakeSize);\r\n            });\r\n\r\n            if (!isFoodExists) this.createFood();\r\n            else {\r\n                ctx.fillStyle = 'rgb(2, 200, 200)';\r\n                ctx.fillRect(currFoodPosX, currFoodPosY, snakeSize, snakeSize);\r\n            }\r\n        }\r\n\r\n        const music = muted ? <button onClick={this.startMusic}>Unmute music</button> : <button onClick={this.stopMusic}>Mute music</button>\r\n\r\n        return (\r\n            <div className=\"main\">\r\n                <div>{music}</div>\r\n                <div className=\"container\">\r\n                    <h1>Score: {score}</h1>\r\n                    <canvas id=\"canvas\" height={fieldSize} width={fieldSize} ref={this.canvas}>\r\n                        Hello world!\r\n                    </canvas>\r\n                    <audio id=\"audio\" src={audio} autoPlay={true} loop={true} muted={true}></audio>\r\n                    {isGameOver ? <GameOver score={score} retry={this.startGame} /> : null}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst GameOver = (props) => {\r\n    const style1 = {\r\n        position: 'absolute',\r\n        backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n        height: '100vh',\r\n        width: '100vw',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    };\r\n    const style2 = {\r\n        width: '300px',\r\n        height: '300px',\r\n        opacity: '0.5',\r\n        backgroundColor: 'white',\r\n        textAlign: 'center',\r\n    };\r\n    return (\r\n        <div style={style1}>\r\n            <div style={style2}>\r\n                <h2>You lose!</h2>\r\n                <h3>Score: {props.score}</h3>\r\n                <div>\r\n                    <button onClick={props.retry}>Retry</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}